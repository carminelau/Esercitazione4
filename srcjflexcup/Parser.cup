/*Specifiche grammaticali e lessicali del nostro linguaggio MyFun


  ************* Specifica grammaticale ****************

    Program ::= VarDeclList FunList Main

    VarDeclList ::= /* empty */
    /*	| VardDecl VarDeclList

    Main ::= MAIN VarDeclList StatList END MAIN SEMI

    FunList ::= /* empty */
    /*	| Fun FunList

    VarDecl ::= Type IdListInit SEMI
        | VAR IdListInitObbl SEMI

    Type ::= INTEGER | BOOL | REAL | STRING

    IdListInit ::= ID
        | IdListInit COMMA ID
        | ID ASSIGN Expr
        | IdListInit COMMA ID ASSIGN Expr

    IdListInitObbl ::= ID ASSIGN Const
        | IdListInitObbl COMMA ID ASSIGN Const

    Const ::= INTEGER_CONST | REAL_CONST | BOOL_CONST | STRING_CONST

    Fun := FUN ID LPAR ParamDeclList RPAR COLON Type
            VarDeclList StatList END FUN SEMI
        | FUN ID LPAR ParamDeclList RPAR
            VarDeclList StatList END FUN SEMI


    ParamDeclList ::= /*empty */
    /*	| NonEmptyParamDeclList

    NonEmptyParamDeclList ::= ParDecl
        | NonEmptyParamDeclList COMMA ParDecl

    ParDecl ::= Type ID
        | OUT Type ID

    StatList ::= Stat
         | Stat StatList

    Stat ::= IfStat SEMI
        | WhileStat SEMI
        | ReadStat SEMI
        | WriteStat SEMI
        | AssignStat SEMI
        | CallFun SEMI
        | RETURN Expr SEMI
        | /* empty */
    /*
    IfStat ::= IF Expr THEN VarDeclList StatList Else END IF

    Else ::= /* empty */
    /*	| ELSE VarDeclList  StatList

    WhileStat ::= WHILE Expr LOOP VarDeclList  StatList END LOOP

    ReadStat ::= READ IdList Expr // Expr deve essere di tipo stringa
        | READ IdList

    IdList ::= ID
        | IdList COMMA ID

    WriteStat ::=  WRITE  Expr
        | WRITELN  Expr
        | WRITET  Expr
        | WRITEB  Expr


    AssignStat ::=  ID ASSIGN Expr

    CallFun ::= ID LPAR ExprList RPAR
        | ID LPAR RPAR

    ExprList ::= Expr
        | Expr COMMA ExprList
        | OUTPAR ID
        | OUTPAR ID COMMA ExprList

    Expr ::= TRUE
        | FALSE
        | INTEGER_CONST
        | REAL_CONST
        | STRING_CONST
        | ID
        | CallFun
        | Expr  PLUS Expr
        | Expr  MINUS Expr
        | Expr  TIMES Expr
        | Expr  DIV Expr
        | Expr  DIVINT Expr
        | Expr  AND Expr
        | Expr POW Expr
        | Expr STR_CONCAT Expr
        | Expr  OR Expr
        | Expr  GT Expr
        | Expr  GE Expr
        | Expr  LT Expr
        | Expr  LE Expr
        | Expr  EQ Expr
        | Expr  NE Expr
        | MINUS Expr
        | NOT Expr
        | LPAR Expr RPAR
*/


package generated;
import java_cup.runtime.*;
import java.util.*;
import syntax.*;
import syntax.statements.*;
import syntax.expression.*;
import syntax.expression.binary.arithmetic.*;
import syntax.expression.binary.relation.*;
import syntax.expression.unary.*;
import syntax.expression.constant.*;
import syntax.types.*;


class Parser;

parser code{:

    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol cur_token) {
      System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
    }

:}

/*Terminal*/
terminal String MAIN,
                ID,
               	INTEGER,
               	STRING,
               	REAL,
               	BOOL,
               	LPAR,
               	RPAR,
               	COLON,
               	FUN,
               	END,
               	IF,
               	THEN,
               	ELSE,
               	WHILE,
               	LOOP,
               	READ,
               	WRITE,
               	WRITELN,
               	WRITEB,
               	WRITET,
               	ASSIGN,
               	PLUS,
               	MINUS,
               	TIMES,
               	DIVINT,
               	DIV,
               	POW,
               	STR_CONCAT,
               	EQ,
               	NE,
               	LT,
               	LE,
               	GT,
               	GE,
               	AND,
               	OR,
               	NOT,
               	NULL,
                STRING_CONST,
                SEMI,
               	COMMA,
               	RETURN;

terminal int INTEGER_CONST;
terminal double REAL_CONST;
terminal boolean  TRUE, FALSE;

//Non terminali

non terminal      Program         	             Program;
non terminal      ArrayList<VarDecl>             VarDeclList;
non terminal      Main                           Main;
non terminal      ArrayList<Fun>                 FunList;
non terminal      VarDecl                        VarDecl;
non terminal      Type                           Type;
non terminal      ArrayList<IdInit>              IdListInit;
non terminal      ArrayList<IdInitObbl>          IdListInitObbl;
non terminal      Const                          Const ;
non terminal      Fun                            Fun;
non terminal      ArrayList<ParamDecl>           ParamDeclList;
non terminal      ArrayList<NonEmptyParamDecl>   NonEmptyParamDeclList ;
non terminal      ParDecl                        ParDecl;
non terminal      ArrayList<Stat>                StatList;
non terminal      Stat                           Stat;
non terminal      If                             IfStat;
non terminal      Else                           Else;
non terminal      While                          WhileStat;
non terminal      Read                           ReadStat;
non terminal      Id                             IdStat;
non terminal      Write                          WriteStat;
non terminal      Assign                         AssignStat;
non terminal      CallFun                        CallFun;
non terminal      ArrayList<Expr>                ExprList;
non terminal      Expr                           Expr;

// Precendenze:: partendo dal basso (precedenza maggiore) a salire (precedenza minore)
precedence left OR;
precedence left AND;
precedence right NOT;
precedence nonassoc EQ, NE, LT, LE, GT, GE;
precedence left STR_CONCAT;
precedence left PLUS, MINUS;
precedence left TIMES,DIV, DIVINT;
precedence right POW;
precedence left LPAR, RPAR;


/*Program ::= VarDeclList FunList Main */
Program ::= VarDeclList:vardecllist_ FunList:funlist_ Main:main_
            {:
                RESULT = new Program(main_left,main_right,vardecllist_,funlist_,main_);
            :}
            ;

/* VarDeclList ::= empty  | VardDecl VarDeclList */
VarDeclList ::= VarDecl:vardecl_ VarDeclList:vardecllist_
                {:
                    vardecllist_.add(vardecl_);
                    RESULT = vardecllist_;
                :}
                |
                //epsilon
                ;

/* Main ::= MAIN VarDeclList StatList END MAIN SEMI */
Main ::= MAIN VarDeclList:vardecllist_ StatList:statlist_ END MAIN SEMI
        {:
            RESULT= new Main(vardeclist_left,vardecllist_right, vardecllist_, statlist_);
        :}
        ;

// FunList ::= Fun FunList
//    | /* empty */

FunList ::= Fun:fun_ FunList:funlist_
            {:
                funlist_.add(fun_);
                RESULT = funlist_;
            :}
            |
            //epsilon
            ;

// VarDecl ::= Type IdListInit SEMI
//        | VAR IdListInitObbl SEMI

VarDecl ::= Type:type_  IdListInitd:idlistinit_ SEMI
            {:
                RESULT = new VarDecl(type_left,type_right,type_, idlistinit_);
            :}
            |
            VAR IdListInitObbl:idlistobbl_ SEMI
            {:
                RESULT = new VarDecl(idlistobbl_left, idlistobbl_right, idlistobbl_);
            :}
            ;

// Const ::= INTEGER_CONST | REAL_CONST | BOOL_CONST | STRING_CONST
Const ::= INTEGER_CONST:integerconst_
        {:
            RESULT = new PrimitiveType(integerconst_left, integerconst_right, "INTEGER_CONST");
        :}
        |
        REAL_CONST:realconst_
        {:
            RESULT = new PrimitiveType(realconst_left, realconst_right, "REAL_CONST");
        :}
        |
        BOOL_CONST:boolconst_
        {:
            RESULT = new PrimitiveType(boolconst_left, boolconst_right, "BOOL_CONST");
        :}
        |
        STRING_CONST:stringconst_
        {:
            RESULT = new PrimitiveType(stringconst_left, stringconst_right, "STRING_CONST");
        :}
        ;