
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import java.util.*;
import syntax.*;
import syntax.statement.*;
import syntax.expression.*;
import syntax.expression.unary.*;
import syntax.expression.constant.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\032\003\000\002\002\004\000\002\032" +
    "\005\000\002\025\004\000\002\025\004\000\002\025\004" +
    "\000\002\025\004\000\002\026\005\000\002\027\006\000" +
    "\002\027\005\000\002\030\003\000\002\030\005\000\002" +
    "\030\004\000\002\030\006\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\004\000\002\031\004\000\002" +
    "\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\006\000\004\005\004\001\002\000\006\002\001\055" +
    "\001\001\002\000\006\002\007\055\006\001\002\000\004" +
    "\005\010\001\002\000\004\002\000\001\002\000\006\002" +
    "\uffff\055\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\006\000\004\032\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol cur_token) {
      System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Id>();
            RESULT.add(new Id(id_left,id_right , id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= IdList EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> start_val = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int idlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idlist_ = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT.add(new Id(id_left,id_right , id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // WriteStat ::= WRITE Expr 
            {
              WriteStat RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStat(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // WriteStat ::= WRITELN Expr 
            {
              WriteStat RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStat(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // WriteStat ::= WRITET Expr 
            {
              WriteStat RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStat(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // WriteStat ::= WRITEB Expr 
            {
              WriteStat RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStat(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStat RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new AssignStat(expr_left, expr_right,new Id(id_left,id_right,id_),expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallingFun RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new CallingFun(exprlist_left, exprlist_right, new Id(id_left,id_right,id_), exprlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CallFun ::= ID LPAR RPAR 
            {
              CallingFun RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new CallingFun(id_left, id_right, new Id(id_left,id_right,id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Expr>();
            RESULT.add(expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            exprlist_.add(expr_);
            RESULT = exprlist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ExprList ::= OUTPAR ID 
            {
              ArrayList<Expr> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Expr>();
            RESULT.add(new Id(id_left, id_right, id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            exprlist_.add(new Id(id_left, id_right, id_));
            RESULT = exprlist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int true_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int true_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean true_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(true_left, true_right, true);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int false_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean false_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(false_left, false_right, false);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int intconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intconst_ = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new IntegerConst(intconst_left, intconst_right, intconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int realconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float realconst_ = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RealConst(realconst_left, realconst_right, realconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringconst_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new StringConst(stringconst_left, stringconst_right, stringconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Expr ::= ID 
            {
              Expr RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Id(id_left, id_right, id_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Expr ::= CallFun 
            {
              Expr RESULT =null;
		int callfun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callfun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallingFun callfun_ = (CallingFun)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Expr(new CallingFun(callfun_left,callfun_right,callfun_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new PlusOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new MinusOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new TimesOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new DivOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new DivIntOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new AndOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new PowOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new StringConcat(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new OrOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new GreaterThan(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new GreaterEqual(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr Expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new LessThan(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr Expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new LessEqual(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Equal(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new NotEqual(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expr ::= UMINUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new UminusExpression(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new NotExpression(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new FunctionParam(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
