
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import java.util.*;
import syntax.*;
import syntax.statement.*;
import syntax.expression.*;
import syntax.expression.binary.arithmetic.*;
import syntax.expression.binary.relation.*;
import syntax.expression.unary.*;
import syntax.expression.constant.*;
import syntax.types.*;
import java.lang.Boolean;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\005\000\002\002\004\000\002\004" +
    "\010\000\002\003\004\000\002\003\002\000\002\005\004" +
    "\000\002\005\002\000\002\006\005\000\002\006\005\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\016\000\002\013" +
    "\014\000\002\014\003\000\002\014\002\000\002\015\003" +
    "\000\002\015\005\000\002\016\004\000\002\016\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\017\004\000\002\020\004\000\002\020\004\000" +
    "\002\020\004\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\021\012\000\002\022" +
    "\005\000\002\022\002\000\002\023\011\000\002\024\005" +
    "\000\002\032\003\000\002\032\005\000\002\025\004\000" +
    "\002\025\004\000\002\025\004\000\002\025\004\000\002" +
    "\026\005\000\002\027\006\000\002\027\005\000\002\030" +
    "\003\000\002\030\005\000\002\030\004\000\002\030\006" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\004\000\002\031\004\000\002\031\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\020\004\ufffd\006\005\007\012\010\014\011" +
    "\010\015\ufffd\063\013\001\002\000\004\005\254\001\002" +
    "\000\036\005\uffeb\006\uffeb\007\uffeb\010\uffeb\011\uffeb\017" +
    "\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb" +
    "\060\uffeb\063\uffeb\001\002\000\004\002\253\001\002\000" +
    "\006\004\ufffb\015\035\001\002\000\036\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\017\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\060\uffea\063\uffea\001\002" +
    "\000\042\004\ufffd\005\ufffd\006\005\007\012\010\014\011" +
    "\010\015\ufffd\017\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd" +
    "\027\ufffd\030\ufffd\060\ufffd\063\013\001\002\000\036\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\017\uffe8\022\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\060\uffe8\063" +
    "\uffe8\001\002\000\004\005\015\001\002\000\036\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\017\uffe9\022\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\060\uffe9\063\uffe9" +
    "\001\002\000\004\031\031\001\002\000\006\053\020\054" +
    "\017\001\002\000\004\005\021\001\002\000\042\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\015\ufff9\017" +
    "\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\060\ufff9\063\ufff9\001\002\000\004\031\022\001\002\000" +
    "\014\052\023\064\024\065\030\066\025\067\026\001\002" +
    "\000\006\053\ufff4\054\ufff4\001\002\000\006\053\ufff8\054" +
    "\ufff8\001\002\000\006\053\ufff6\054\ufff6\001\002\000\006" +
    "\053\ufff5\054\ufff5\001\002\000\006\053\uffe2\054\uffe2\001" +
    "\002\000\006\053\ufff7\054\ufff7\001\002\000\014\052\023" +
    "\064\024\065\030\066\025\067\026\001\002\000\006\053" +
    "\uffe3\054\uffe3\001\002\000\030\004\ufffe\005\ufffe\015\ufffe" +
    "\017\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\060\ufffe\001\002\000\006\004\ufffb\015\035\001\002" +
    "\000\004\005\221\001\002\000\004\004\037\001\002\000" +
    "\036\005\ufffd\006\005\007\012\010\014\011\010\017\ufffd" +
    "\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\060" +
    "\ufffd\063\013\001\002\000\004\002\001\001\002\000\024" +
    "\005\054\017\051\022\043\024\042\025\055\026\046\027" +
    "\062\030\044\060\060\001\002\000\004\005\214\001\002" +
    "\000\024\005\074\012\071\051\075\052\067\055\065\064" +
    "\073\065\063\066\066\067\072\001\002\000\024\005\074" +
    "\012\071\051\075\052\067\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\004\053\204\001\002\000\024" +
    "\005\074\012\071\051\075\052\067\055\065\064\073\065" +
    "\063\066\066\067\072\001\002\000\004\053\202\001\002" +
    "\000\004\053\201\001\002\000\024\005\074\012\071\051" +
    "\075\052\067\055\065\064\073\065\063\066\066\067\072" +
    "\001\002\000\004\053\166\001\002\000\004\016\163\001" +
    "\002\000\006\012\135\031\161\001\002\000\024\005\074" +
    "\012\071\051\075\052\067\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\024\005\054\017\051\022\043" +
    "\024\042\025\055\026\046\027\062\030\044\060\060\001" +
    "\002\000\004\053\156\001\002\000\024\005\074\012\071" +
    "\051\075\052\067\055\065\064\073\065\063\066\066\067" +
    "\072\001\002\000\004\053\153\001\002\000\024\005\074" +
    "\012\071\051\075\052\067\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\052\013\uffc4\020\uffc4\023\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\053\uffc4\054\uffc4\001\002\000\042\032" +
    "\104\033\077\034\110\035\115\036\106\037\101\040\111" +
    "\041\103\042\112\043\113\044\105\045\107\046\102\047" +
    "\100\050\114\053\uffcf\001\002\000\024\005\074\012\071" +
    "\051\075\052\067\055\065\064\073\065\063\066\066\067" +
    "\072\001\002\000\052\013\uffc7\020\uffc7\023\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\053\uffc7\054\uffc7\001\002\000\052\013\uffc3\020" +
    "\uffc3\023\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\053\uffc3\054\uffc3\001\002" +
    "\000\052\013\uffc1\020\uffc1\023\uffc1\032\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\053" +
    "\uffc1\054\uffc1\001\002\000\024\005\074\012\071\051\075" +
    "\052\067\055\065\064\073\065\063\066\066\067\072\001" +
    "\002\000\052\013\uffc6\020\uffc6\023\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\053\uffc6\054\uffc6\001\002\000\052\013\uffc5\020\uffc5\023" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\050\uffc5\053\uffc5\054\uffc5\001\002\000\054" +
    "\012\135\013\uffc2\020\uffc2\023\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\053" +
    "\uffc2\054\uffc2\001\002\000\024\005\074\012\071\051\075" +
    "\052\067\055\065\064\073\065\063\066\066\067\072\001" +
    "\002\000\052\013\uffb0\020\uffb0\023\uffb0\032\104\033\077" +
    "\034\110\035\115\036\106\037\101\040\111\041\103\042" +
    "\112\043\113\044\105\045\107\046\102\047\uffb0\050\uffb0" +
    "\053\uffb0\054\uffb0\001\002\000\024\005\074\012\071\051" +
    "\075\052\067\055\065\064\073\065\063\066\066\067\072" +
    "\001\002\000\024\005\074\012\071\051\075\052\067\055" +
    "\065\064\073\065\063\066\066\067\072\001\002\000\024" +
    "\005\074\012\071\051\075\052\067\055\065\064\073\065" +
    "\063\066\066\067\072\001\002\000\024\005\074\012\071" +
    "\051\075\052\067\055\065\064\073\065\063\066\066\067" +
    "\072\001\002\000\024\005\074\012\071\051\075\052\067" +
    "\055\065\064\073\065\063\066\066\067\072\001\002\000" +
    "\024\005\074\012\071\051\075\052\067\055\065\064\073" +
    "\065\063\066\066\067\072\001\002\000\024\005\074\012" +
    "\071\051\075\052\067\055\065\064\073\065\063\066\066" +
    "\067\072\001\002\000\024\005\074\012\071\051\075\052" +
    "\067\055\065\064\073\065\063\066\066\067\072\001\002" +
    "\000\024\005\074\012\071\051\075\052\067\055\065\064" +
    "\073\065\063\066\066\067\072\001\002\000\024\005\074" +
    "\012\071\051\075\052\067\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\024\005\074\012\071\051\075" +
    "\052\067\055\065\064\073\065\063\066\066\067\072\001" +
    "\002\000\024\005\074\012\071\051\075\052\067\055\065" +
    "\064\073\065\063\066\066\067\072\001\002\000\024\005" +
    "\074\012\071\051\075\052\067\055\065\064\073\065\063" +
    "\066\066\067\072\001\002\000\024\005\074\012\071\051" +
    "\075\052\067\055\065\064\073\065\063\066\066\067\072" +
    "\001\002\000\024\005\074\012\071\051\075\052\067\055" +
    "\065\064\073\065\063\066\066\067\072\001\002\000\052" +
    "\013\uffbc\020\uffbc\023\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\101\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\053\uffbc\054" +
    "\uffbc\001\002\000\052\013\uffb8\020\uffb8\023\uffb8\032\104" +
    "\033\077\034\110\035\115\036\106\037\101\040\111\041" +
    "\103\042\112\043\113\044\105\045\107\046\102\047\100" +
    "\050\uffb8\053\uffb8\054\uffb8\001\002\000\036\013\uffb5\020" +
    "\uffb5\023\uffb5\032\104\033\077\034\110\035\115\036\106" +
    "\037\101\040\111\047\uffb5\050\uffb5\053\uffb5\054\uffb5\001" +
    "\002\000\036\013\uffb2\020\uffb2\023\uffb2\032\104\033\077" +
    "\034\110\035\115\036\106\037\101\040\111\047\uffb2\050" +
    "\uffb2\053\uffb2\054\uffb2\001\002\000\052\013\uffb9\020\uffb9" +
    "\023\uffb9\032\104\033\077\034\110\035\115\036\106\037" +
    "\101\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\053\uffb9\054\uffb9\001\002\000" +
    "\052\013\uffbe\020\uffbe\023\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\101\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\053\uffbe" +
    "\054\uffbe\001\002\000\036\013\uffb7\020\uffb7\023\uffb7\032" +
    "\104\033\077\034\110\035\115\036\106\037\101\040\111" +
    "\047\uffb7\050\uffb7\053\uffb7\054\uffb7\001\002\000\052\013" +
    "\uffbd\020\uffbd\023\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\036\uffbd\037\101\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\053\uffbd\054\uffbd" +
    "\001\002\000\036\013\uffb4\020\uffb4\023\uffb4\032\104\033" +
    "\077\034\110\035\115\036\106\037\101\040\111\047\uffb4" +
    "\050\uffb4\053\uffb4\054\uffb4\001\002\000\052\013\uffc0\020" +
    "\uffc0\023\uffc0\032\uffc0\033\uffc0\034\110\035\115\036\106" +
    "\037\101\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\053\uffc0\054\uffc0\001\002" +
    "\000\036\013\uffb3\020\uffb3\023\uffb3\032\104\033\077\034" +
    "\110\035\115\036\106\037\101\040\111\047\uffb3\050\uffb3" +
    "\053\uffb3\054\uffb3\001\002\000\036\013\uffb6\020\uffb6\023" +
    "\uffb6\032\104\033\077\034\110\035\115\036\106\037\101" +
    "\040\111\047\uffb6\050\uffb6\053\uffb6\054\uffb6\001\002\000" +
    "\052\013\uffba\020\uffba\023\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\101\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\053\uffba" +
    "\054\uffba\001\002\000\052\013\uffbb\020\uffbb\023\uffbb\032" +
    "\104\033\077\034\110\035\115\036\106\037\101\040\111" +
    "\041\103\042\112\043\113\044\105\045\107\046\102\047" +
    "\uffbb\050\uffbb\053\uffbb\054\uffbb\001\002\000\052\013\uffbf" +
    "\020\uffbf\023\uffbf\032\uffbf\033\uffbf\034\110\035\115\036" +
    "\106\037\101\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\053\uffbf\054\uffbf\001" +
    "\002\000\030\005\074\012\071\013\141\051\075\052\067" +
    "\055\065\061\140\064\073\065\063\066\066\067\072\001" +
    "\002\000\044\013\uffcb\032\104\033\077\034\110\035\115" +
    "\036\106\037\101\040\111\041\103\042\112\043\113\044" +
    "\105\045\107\046\102\047\100\050\114\054\146\001\002" +
    "\000\004\013\145\001\002\000\004\005\142\001\002\000" +
    "\052\013\uffcc\020\uffcc\023\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\001\002\000\006\013\uffc9\054\143\001\002\000" +
    "\026\005\074\012\071\051\075\052\067\055\065\061\140" +
    "\064\073\065\063\066\066\067\072\001\002\000\004\013" +
    "\uffc8\001\002\000\052\013\uffcd\020\uffcd\023\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\053\uffcd\054\uffcd\001\002\000\026\005\074\012" +
    "\071\051\075\052\067\055\065\061\140\064\073\065\063" +
    "\066\066\067\072\001\002\000\004\013\uffca\001\002\000" +
    "\042\013\151\032\104\033\077\034\110\035\115\036\106" +
    "\037\101\040\111\041\103\042\112\043\113\044\105\045" +
    "\107\046\102\047\100\050\114\001\002\000\052\013\uffaf" +
    "\020\uffaf\023\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\uffaf\047\uffaf\050\uffaf\053\uffaf\054\uffaf\001" +
    "\002\000\052\013\uffb1\020\uffb1\023\uffb1\032\104\033\077" +
    "\034\110\035\115\036\106\037\101\040\111\041\103\042" +
    "\112\043\113\044\105\045\107\046\102\047\100\050\114" +
    "\053\uffb1\054\uffb1\001\002\000\024\005\uffde\017\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\060\uffde" +
    "\001\002\000\042\032\104\033\077\034\110\035\115\036" +
    "\106\037\101\040\111\041\103\042\112\043\113\044\105" +
    "\045\107\046\102\047\100\050\114\053\155\001\002\000" +
    "\024\005\uffda\017\uffda\022\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\060\uffda\001\002\000\024\005\uffdd\017" +
    "\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd" +
    "\060\uffdd\001\002\000\006\016\uffe1\021\uffe1\001\002\000" +
    "\042\032\104\033\077\034\110\035\115\036\106\037\101" +
    "\040\111\041\103\042\112\043\113\044\105\045\107\046" +
    "\102\047\100\050\114\053\uffd2\001\002\000\024\005\074" +
    "\012\071\051\075\052\067\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\042\032\104\033\077\034\110" +
    "\035\115\036\106\037\101\040\111\041\103\042\112\043" +
    "\113\044\105\045\107\046\102\047\100\050\114\053\uffce" +
    "\001\002\000\004\004\164\001\002\000\004\053\165\001" +
    "\002\000\004\002\uffff\001\002\000\024\005\uffdc\017\uffdc" +
    "\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\060" +
    "\uffdc\001\002\000\042\020\170\032\104\033\077\034\110" +
    "\035\115\036\106\037\101\040\111\041\103\042\112\043" +
    "\113\044\105\045\107\046\102\047\100\050\114\001\002" +
    "\000\036\005\ufffd\006\005\007\012\010\014\011\010\017" +
    "\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\060\ufffd\063\013\001\002\000\024\005\054\017\051\022" +
    "\043\024\042\025\055\026\046\027\062\030\044\060\060" +
    "\001\002\000\006\016\uffd7\021\173\001\002\000\036\005" +
    "\ufffd\006\005\007\012\010\014\011\010\017\ufffd\022\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\060\ufffd\063" +
    "\013\001\002\000\004\016\175\001\002\000\004\017\176" +
    "\001\002\000\004\053\uffd9\001\002\000\024\005\054\017" +
    "\051\022\043\024\042\025\055\026\046\027\062\030\044" +
    "\060\060\001\002\000\004\016\uffd8\001\002\000\024\005" +
    "\uffe0\017\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\060\uffe0\001\002\000\024\005\uffdb\017\uffdb\022" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\060\uffdb" +
    "\001\002\000\042\032\104\033\077\034\110\035\115\036" +
    "\106\037\101\040\111\041\103\042\112\043\113\044\105" +
    "\045\107\046\102\047\100\050\114\053\uffd1\001\002\000" +
    "\024\005\uffdf\017\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\027\uffdf\030\uffdf\060\uffdf\001\002\000\042\032\104\033" +
    "\077\034\110\035\115\036\106\037\101\040\111\041\103" +
    "\042\112\043\113\044\105\045\107\046\102\047\100\050" +
    "\114\053\uffd0\001\002\000\042\023\207\032\104\033\077" +
    "\034\110\035\115\036\106\037\101\040\111\041\103\042" +
    "\112\043\113\044\105\045\107\046\102\047\100\050\114" +
    "\001\002\000\036\005\ufffd\006\005\007\012\010\014\011" +
    "\010\017\ufffd\022\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\060\ufffd\063\013\001\002\000\024\005\054\017" +
    "\051\022\043\024\042\025\055\026\046\027\062\030\044" +
    "\060\060\001\002\000\004\016\212\001\002\000\004\023" +
    "\213\001\002\000\004\053\uffd6\001\002\000\026\005\uffd4" +
    "\012\uffd4\051\uffd4\052\uffd4\054\uffd4\055\uffd4\064\uffd4\065" +
    "\uffd4\066\uffd4\067\uffd4\001\002\000\026\005\074\012\071" +
    "\051\075\052\067\054\217\055\065\064\073\065\063\066" +
    "\066\067\072\001\002\000\042\032\104\033\077\034\110" +
    "\035\115\036\106\037\101\040\111\041\103\042\112\043" +
    "\113\044\105\045\107\046\102\047\100\050\114\053\uffd5" +
    "\001\002\000\004\005\220\001\002\000\026\005\uffd3\012" +
    "\uffd3\051\uffd3\052\uffd3\054\uffd3\055\uffd3\064\uffd3\065\uffd3" +
    "\066\uffd3\067\uffd3\001\002\000\004\012\222\001\002\000" +
    "\016\006\005\007\012\010\014\011\010\013\ufff0\062\227" +
    "\001\002\000\004\013\235\001\002\000\004\005\234\001" +
    "\002\000\006\013\uffef\054\uffef\001\002\000\006\013\ufff1" +
    "\054\232\001\002\000\012\006\005\007\012\010\014\011" +
    "\010\001\002\000\004\005\231\001\002\000\006\013\uffec" +
    "\054\uffec\001\002\000\014\006\005\007\012\010\014\011" +
    "\010\062\227\001\002\000\006\013\uffee\054\uffee\001\002" +
    "\000\006\013\uffed\054\uffed\001\002\000\040\005\ufffd\006" +
    "\005\007\012\010\014\011\010\014\237\017\ufffd\022\ufffd" +
    "\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\060\ufffd\063" +
    "\013\001\002\000\024\005\054\017\051\022\043\024\042" +
    "\025\055\026\046\027\062\030\044\060\060\001\002\000" +
    "\012\006\005\007\012\010\014\011\010\001\002\000\036" +
    "\005\ufffd\006\005\007\012\010\014\011\010\017\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\060\ufffd" +
    "\063\013\001\002\000\024\005\054\017\051\022\043\024" +
    "\042\025\055\026\046\027\062\030\044\060\060\001\002" +
    "\000\004\016\243\001\002\000\004\015\244\001\002\000" +
    "\004\053\245\001\002\000\006\004\ufff3\015\ufff3\001\002" +
    "\000\004\016\247\001\002\000\004\015\250\001\002\000" +
    "\004\053\251\001\002\000\006\004\ufff2\015\ufff2\001\002" +
    "\000\004\004\ufffc\001\002\000\004\002\000\001\002\000" +
    "\010\031\263\053\uffe7\054\uffe7\001\002\000\006\053\257" +
    "\054\256\001\002\000\004\005\260\001\002\000\042\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\015\ufffa" +
    "\017\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\060\ufffa\063\ufffa\001\002\000\010\031\261\053\uffe6" +
    "\054\uffe6\001\002\000\024\005\074\012\071\051\075\052" +
    "\067\055\065\064\073\065\063\066\066\067\072\001\002" +
    "\000\044\032\104\033\077\034\110\035\115\036\106\037" +
    "\101\040\111\041\103\042\112\043\113\044\105\045\107" +
    "\046\102\047\100\050\114\053\uffe4\054\uffe4\001\002\000" +
    "\024\005\074\012\071\051\075\052\067\055\065\064\073" +
    "\065\063\066\066\067\072\001\002\000\044\032\104\033" +
    "\077\034\110\035\115\036\106\037\101\040\111\041\103" +
    "\042\112\043\113\044\105\045\107\046\102\047\100\050" +
    "\114\053\uffe5\054\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\262\000\012\002\005\003\006\006\010\007\003\001" +
    "\001\000\004\010\254\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\035\013\033\001\001\000\002\001" +
    "\001\000\010\003\032\006\010\007\003\001\001\000\002" +
    "\001\001\000\004\011\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\251\013\033\001\001\000\002\001\001\000\004\004" +
    "\037\001\001\000\010\003\040\006\010\007\003\001\001" +
    "\000\002\001\001\000\022\017\052\020\055\021\047\023" +
    "\044\024\060\025\056\026\051\027\046\001\001\000\004" +
    "\032\214\001\001\000\006\027\067\031\205\001\001\000" +
    "\006\027\067\031\204\001\001\000\002\001\001\000\006" +
    "\027\067\031\202\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\067\031\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\067\031" +
    "\157\001\001\000\022\017\156\020\055\021\047\023\044" +
    "\024\060\025\056\026\051\027\046\001\001\000\002\001" +
    "\001\000\006\027\067\031\153\001\001\000\002\001\001" +
    "\000\006\027\067\031\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\027\067\031\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\147\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\067\031\075\001\001\000" +
    "\002\001\001\000\006\027\067\031\133\001\001\000\006" +
    "\027\067\031\132\001\001\000\006\027\067\031\131\001" +
    "\001\000\006\027\067\031\130\001\001\000\006\027\067" +
    "\031\127\001\001\000\006\027\067\031\126\001\001\000" +
    "\006\027\067\031\125\001\001\000\006\027\067\031\124" +
    "\001\001\000\006\027\067\031\123\001\001\000\006\027" +
    "\067\031\122\001\001\000\006\027\067\031\121\001\001" +
    "\000\006\027\067\031\120\001\001\000\006\027\067\031" +
    "\117\001\001\000\006\027\067\031\116\001\001\000\006" +
    "\027\067\031\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\067\030\136\031\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\067\030\143\031\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\067\030\146\031\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\067\031" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\170\006\010\007\003\001\001\000\022" +
    "\017\171\020\055\021\047\023\044\024\060\025\056\026" +
    "\051\027\046\001\001\000\004\022\173\001\001\000\010" +
    "\003\176\006\010\007\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\177\020\055" +
    "\021\047\023\044\024\060\025\056\026\051\027\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\207\006\010\007\003\001\001" +
    "\000\022\017\210\020\055\021\047\023\044\024\060\025" +
    "\056\026\051\027\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\223\014" +
    "\222\015\225\016\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\223\016\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\235\006\010\007\003\001\001\000\022" +
    "\017\245\020\055\021\047\023\044\024\060\025\056\026" +
    "\051\027\046\001\001\000\004\007\237\001\001\000\010" +
    "\003\240\006\010\007\003\001\001\000\022\017\241\020" +
    "\055\021\047\023\044\024\060\025\056\026\051\027\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\027" +
    "\067\031\261\001\001\000\002\001\001\000\006\027\067" +
    "\031\263\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String msg, Object info) {
      Symbol sym = (Symbol)info;
      System.out.println(msg + ": " + symbl_name_from_id(sym.sym));
    }

    public void syntax_error(Symbol cur_token) {
      System.out.println("Syntax error: " + symbl_name_from_id(cur_token.sym));
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              Program RESULT =null;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int funlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Fun> funlist_ = (ArrayList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int main_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int main_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Main main_ = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                RESULT = new Program(main_left,main_right,vardecllist_,funlist_,main_);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              Main RESULT =null;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            RESULT= new Main(vardecllist_left,vardecllist_right, vardecllist_, statlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDecl> RESULT =null;
		int vardecl_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardecl_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDecl vardecl_ = (VarDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    vardecllist_.add(vardecl_);
                    RESULT = vardecllist_;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDeclList ::= 
            {
              ArrayList<VarDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= Fun FunList 
            {
              ArrayList<Fun> RESULT =null;
		int fun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Fun fun_ = (Fun)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int funlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Fun> funlist_ = (ArrayList<Fun>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                funlist_.add(fun_);
                RESULT = funlist_;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= 
            {
              ArrayList<Fun> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDecl RESULT =null;
		int type_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int type_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type type_ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idlistinit_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlistinit_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AssignStatement> idlistinit_ = (ArrayList<AssignStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new VarDecl(type_left,type_right,type_, idlistinit_);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              VarDecl RESULT =null;
		int idlistobbl_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlistobbl_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<AssignStatement> idlistobbl_ = (ArrayList<AssignStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                RESULT = new VarDecl(idlistobbl_left, idlistobbl_right, idlistobbl_);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Const ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int int_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int int_ = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new IntegerConst(int_left, int_right, int_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Const ::= REAL_CONST 
            {
              Expr RESULT =null;
		int realconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float realconst_ = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RealConst(realconst_left, realconst_right, realconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Const ::= TRUE 
            {
              Expr RESULT =null;
		int true_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int true_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean true_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(true_left, true_right, true);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Const ::= FALSE 
            {
              Expr RESULT =null;
		int false_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean false_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(false_left, false_right, false);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Const ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringconst_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new StringConst(stringconst_left, stringconst_right, stringconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int fun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int fun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String fun_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int Id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int Id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String Id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int paramdeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int paramdeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		ArrayList<ParDecl> paramdeclist_ = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int type_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int type_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Type type_ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vardeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vardeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> vardeclist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            RESULT = new Fun(fun_left, fun_right, new Id(Id_left,Id_right,Id_),paramdeclist_, type_, vardeclist_, statlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              Fun RESULT =null;
		int fun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int fun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String fun_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int Id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int Id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String Id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramdeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int paramdeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<ParDecl> paramdeclist_ = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vardeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vardeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> vardeclist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
            RESULT = new Fun(fun_left,fun_right, new Id(Id_left,Id_right,Id_), paramdeclist_, vardeclist_,statlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDecl> RESULT =null;
		int nonemptyparamdeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nonemptyparamdeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDecl> nonemptyparamdeclist_ = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = nonemptyparamdeclist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ParamDeclList ::= 
            {
              ArrayList<ParDecl> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int pardecl_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pardecl_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl pardecl_ = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<ParDecl>();
            RESULT.add(pardecl_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              ArrayList<ParDecl> RESULT =null;
		int nonemptyparamdeclist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nonemptyparamdeclist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDecl> nonemptyparamdeclist_ = (ArrayList<ParDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pardecl_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pardecl_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDecl pardecl_ = (ParDecl)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            nonemptyparamdeclist_.add(pardecl_);
            RESULT = nonemptyparamdeclist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParDecl ::= Type ID 
            {
              ParDecl RESULT =null;
		int type_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int type_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type_ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ParDecl(type_left, type_right, type_,new Id(id_left,id_right,id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParDecl ::= OUT Type ID 
            {
              ParDecl RESULT =null;
		int out_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int out_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String out_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int type_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int type_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type type_ = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ParDecl(out_left, out_right, type_,new Id(id_left,id_right,id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= INTEGER 
            {
              Type RESULT =null;
		int int_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int int_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String int_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new PrimitiveType(int_left,int_right,"INTEGER");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= BOOL 
            {
              Type RESULT =null;
		int bool_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bool_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String bool_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new PrimitiveType(bool_left,bool_right,"BOOL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= REAL 
            {
              Type RESULT =null;
		int real_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int real_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String real_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT =new PrimitiveType(real_left,real_right,"REAL");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Type ::= STRING 
            {
              Type RESULT =null;
		int string_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int string_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String string_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new PrimitiveType(string_left,string_right,"STRING");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IdListInit ::= ID 
            {
              ArrayList<AssignStatement> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList<AssignStatement>();
        RESULT.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_)));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IdListInit ::= IdListInit COMMA ID 
            {
              ArrayList<AssignStatement> RESULT =null;
		int idlistinitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlistinitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<AssignStatement> idlistinit = (ArrayList<AssignStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idlistinit.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_)));
        RESULT = idlistinit;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IdListInit ::= ID ASSIGN Expr 
            {
              ArrayList<AssignStatement> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList<AssignStatement>();
        RESULT.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_), expr_));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              ArrayList<AssignStatement> RESULT =null;
		int idlistinit_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idlistinit_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<AssignStatement> idlistinit_ = (ArrayList<AssignStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idlistinit_.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_), expr_));
        RESULT = idlistinit_;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInit",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IdListInitObbl ::= ID ASSIGN Const 
            {
              ArrayList<AssignStatement> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int const_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr const_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = new ArrayList<AssignStatement>();
        RESULT.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_), const_));
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IdListInitObbl ::= IdListInitObbl COMMA ID ASSIGN Const 
            {
              ArrayList<AssignStatement> RESULT =null;
		int idlistinitobbl_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idlistinitobbl_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<AssignStatement> idlistinitobbl_ = (ArrayList<AssignStatement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int const_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int const_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr const_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        idlistinitobbl_.add(new AssignStatement(id_left,id_right,new Id(id_left,id_right, id_), const_));
        RESULT = idlistinitobbl_;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // StatList ::= Stat StatList 
            {
              ArrayList<Statement> RESULT =null;
		int stat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Statement stat_ = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        statlist_.add(stat_);
        RESULT = statlist_;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= IfStat SEMI 
            {
              Statement RESULT =null;
		int ifstat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int ifstat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		IfStatement ifstat_ = (IfStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new IfStatement(ifstat_left,ifstat_right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= WhileStat SEMI 
            {
              Statement RESULT =null;
		int whilestat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int whilestat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WhileStatement whilestat_ = (WhileStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new WhileStatement(whilestat_left, whilestat_right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= ReadStat SEMI 
            {
              Statement RESULT =null;
		int readstat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readstat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatement readstat_ = (ReadStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new ReadStatement(readstat_left, readstat_right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= WriteStat SEMI 
            {
              Statement RESULT =null;
		int writestat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writestat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatement writestat_ = (WriteStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new WriteStatement(writestat_left, writestat_right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Stat ::= AssignStat SEMI 
            {
              Statement RESULT =null;
		int assignstat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignstat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatement assignstat_ = (AssignStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new AssignStatement(assignstat_left, assignstat_right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Stat ::= CallFun SEMI 
            {
              Statement RESULT =null;
		int callfun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callfun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CallingFun callfun_ = (CallingFun)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new CallingFunStatement(callfun_left,callfun_right, callfun_) ;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= RETURN Expr SEMI 
            {
              Statement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new ReturnStatement(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              IfStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int else_Stat_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int else_Stat_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ElseStatement else_Stat_ = (ElseStatement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new IfStatement(expr_left, expr_right, expr_, vardecllist_, statlist_, else_Stat_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= ELSE VarDeclList StatList 
            {
              ElseStatement RESULT =null;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ElseStatement(vardecllist_left, vardecllist_right, vardecllist_, statlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Else ::= 
            {
              ElseStatement RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              WhileStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vardecllist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vardecllist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VarDecl> vardecllist_ = (ArrayList<VarDecl>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int statlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Statement> statlist_ = (ArrayList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new WhileStatement(expr_left, expr_right, expr_, vardecllist_, statlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ReadStat ::= READ IdList Expr 
            {
              ReadStatement RESULT =null;
		int idlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Id> idlist_ = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ReadStatement(idlist_left,idlist_right,idlist_,expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IdList ::= ID 
            {
              ArrayList<Id> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Id>();
            RESULT.add(new Id(id_left,id_right , id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Id> RESULT =null;
		int idlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Id> idlist_ = (ArrayList<Id>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT.add(new Id(id_left,id_right , id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WriteStat ::= WRITE Expr 
            {
              WriteStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStatement(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WriteStat ::= WRITELN Expr 
            {
              WriteStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStatement(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // WriteStat ::= WRITET Expr 
            {
              WriteStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStatement(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // WriteStat ::= WRITEB Expr 
            {
              WriteStatement RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new WriteStatement(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // AssignStat ::= ID ASSIGN Expr 
            {
              AssignStatement RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new AssignStatement(expr_left, expr_right,new Id(id_left,id_right,id_),expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CallFun ::= ID LPAR ExprList RPAR 
            {
              CallingFun RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new CallingFun(exprlist_left, exprlist_right, new Id(id_left,id_right,id_), exprlist_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CallFun ::= ID LPAR RPAR 
            {
              CallingFun RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            RESULT = new CallingFun(id_left, id_right, new Id(id_left,id_right,id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Expr>();
            RESULT.add(expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            exprlist_.add(expr_);
            RESULT = exprlist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprList ::= OUTPAR ID 
            {
              ArrayList<Expr> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new ArrayList<Expr>();
            RESULT.add(new Id(id_left, id_right, id_));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprlist_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprlist_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprlist_ = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            exprlist_.add(new Id(id_left, id_right, id_));
            RESULT = exprlist_;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= TRUE 
            {
              Expr RESULT =null;
		int true_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int true_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean true_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(true_left, true_right, true);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= FALSE 
            {
              Expr RESULT =null;
		int false_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int false_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		boolean false_ = (boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new BooleanConst(false_left, false_right, false);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= INTEGER_CONST 
            {
              Expr RESULT =null;
		int intconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int intconst_ = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new IntegerConst(intconst_left, intconst_right, intconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= REAL_CONST 
            {
              Expr RESULT =null;
		int realconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int realconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		float realconst_ = (float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new RealConst(realconst_left, realconst_right, realconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= STRING_CONST 
            {
              Expr RESULT =null;
		int stringconst_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stringconst_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String stringconst_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new StringConst(stringconst_left, stringconst_right, stringconst_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= ID 
            {
              Expr RESULT =null;
		int id_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id_ = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Id(id_left, id_right, id_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= CallFun 
            {
              Expr RESULT =null;
		int callfun_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callfun_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		CallingFun callfun_ = (CallingFun)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new CallingFun(callfun_left,callfun_right, callfun_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new PlusOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new MinusOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new TimesOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new DivOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr DIVINT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new DivIntOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new AndRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new PowOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new Str_ConcatOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new OrRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new GreatThanRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new GreatThanEqualsRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new LessThanRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new LessThanEqualsRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new EqualsRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr1_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr1_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr1_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new NotEqualsRelOperation(expr_left,expr_right,expr_,expr1_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= UMINUS Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new UminusExpression(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new NotExpression(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int expr_left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expr_right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr_ = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            RESULT = new FunctionParam(expr_left, expr_right, expr_);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
